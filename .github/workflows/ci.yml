name: Wine Pok√©dex CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC to catch any issues
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: 0

jobs:
  # Code Quality and Linting
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check TypeScript
        run: npx tsc --noEmit
        
      - name: Check code formatting
        run: npx prettier --check .
        continue-on-error: true

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with Jest
        run: npm run test
        
      - name: Run unit tests with Vitest
        run: npm run test:unit
        
      - name: Generate coverage report
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-${{ matrix.node-version }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Integration Tests  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          
      - name: Analyze bundle size
        run: |
          npx next build --analyze || true
          ls -la .next/static/chunks/
        continue-on-error: true

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: [build]
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
            
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots-${{ matrix.browser }}
          path: test-results/screenshots/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Run performance tests
        run: npx playwright test e2e/performance.spec.ts
        
      - name: Generate Lighthouse reports
        run: |
          npm install -g lighthouse
          npm start &
          sleep 10
          lighthouse http://localhost:3000 --output=html --output-path=./lighthouse-report.html --chrome-flags="--headless" || true
          pkill -f "npm start"
        continue-on-error: true
        
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            test-results/
            lighthouse-report.html

  # Visual Regression Tests
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Run visual regression tests
        run: npx playwright test e2e/visual-regression.spec.ts
        
      - name: Upload visual diff results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-regression-diffs
          path: test-results/screenshots/

  # Mobile Tests
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Run mobile tests
        run: npx playwright test e2e/mobile-testing.spec.ts
        
      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results
          path: test-results/

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Accessibility Tests
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Run accessibility tests with axe-playwright
        run: |
          npm install @axe-core/playwright
          npx playwright test --grep "accessibility"
        continue-on-error: true
        
      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: test-results/

  # Deployment (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, e2e-tests, performance-tests, visual-regression, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Deploy to Vercel
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  # Deployment (Preview)  
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for preview
        run: npm run build
        
      - name: Deploy preview to Vercel
        uses: vercel/action@v1
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üç∑ Wine Pok√©dex Preview Deployed!\n\n**Preview URL:** ${{ steps.vercel-deploy.outputs.preview-url }}\n\nYour changes are ready for review!`
            })

  # Post-deployment Tests
  post-deployment:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Run smoke tests against production
        run: npx playwright test --grep "smoke" --base-url=https://wine-pokedex.vercel.app
        continue-on-error: true
        
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage || true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, visual-regression, mobile-tests, security, accessibility]
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/
          
      - name: Generate test summary
        run: |
          echo "# üç∑ Wine Pok√©dex Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Unit Tests: $(ls all-test-results/*unit* 2>/dev/null | wc -l) artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Integration Tests: $(ls all-test-results/*integration* 2>/dev/null | wc -l) artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ E2E Tests: $(ls all-test-results/*e2e* 2>/dev/null | wc -l) artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Performance Tests: $(ls all-test-results/*performance* 2>/dev/null | wc -l) artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Visual Regression: $(ls all-test-results/*visual* 2>/dev/null | wc -l) artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Mobile Tests: $(ls all-test-results/*mobile* 2>/dev/null | wc -l) artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Accessibility Tests: $(ls all-test-results/*accessibility* 2>/dev/null | wc -l) artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Quality Gates Status" >> $GITHUB_STEP_SUMMARY
          echo "All tests completed. Check individual job results for details." >> $GITHUB_STEP_SUMMARY
        
      - name: Publish test results summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: all-test-results/